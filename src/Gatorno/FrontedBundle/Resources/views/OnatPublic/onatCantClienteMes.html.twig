{% extends '::frontedBasePublic.html.twig' %}

{% block stylesheet_independientes %}
    <style type="text/css">
        #ToolTables_table-example_0 { display: none }
    </style>
{% endblock %}
{% block activeONAT %}active{% endblock %}
{% block activeClientesONAT %}active{% endblock %}

{% block body %}
    <div id="page-wrapper" class="container">
    <div class="row">

    <div id="content-wrapper">
    <div class="row">
    <div class="col-lg-12">
    {#PRIMERA FILA#}
    {#<div class="row">
        <div class="col-lg-12">
            <div id="content-header" class="clearfix">
                #}{#<div class="pull-left">
                    <ol class="breadcrumb">
                        <li><a href="{{ path('fronted_homepage') }}">Home</a></li>
                        <li class="active"><span>Dashboard</span></li>
                    </ol>
                    <h1>Dashboard</h1>
                </div>#}{#
                <div class="pull-right hidden-xs">
                    <div class="xs-graph pull-left">
                        <div class="graph-label">
                            <b><i class="fa fa-shopping-cart"></i> 838</b> Orders
                        </div>
                        <div class="graph-content spark-orders"></div>
                    </div>
                    <div class="xs-graph pull-left mrg-l-lg mrg-r-sm">
                        <div class="graph-label">
                            <b>&dollar;12.338</b> Revenues
                        </div>
                        <div class="graph-content spark-revenues"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>#}{# FIN PRIMERA FILA#}
    {#2DA FILA#}

    {#3RA FILA#}

    {#prueba del grafico inicial#}
    <div class="row">
        <div class="col-md-12">
            <div class="main-box">
                <header class="main-box-header clearfix">
                    <h2 class="pull-left">Clientes Por Meses</h2>
                </header>
                <div class="main-box-body clearfix">
                    <div class="row">
                        <div class="col-md-12">
                            <div id="graph-bar1" style="height: 240px; padding: 0px; position: relative;"></div>
                        </div>
                        {#aqui va#}
                    </div>
                </div>
            </div>
        </div>
    </div>
    {#GRAPHIC-MORRIS CANT DE CLIENTES POR MES#}
    {#<div class="row">#}
        {#<div class="col-lg-12">#}
            {#<div class="main-box">#}
                {#<header class="main-box-header clearfix">#}
                    {#<h2>Clientes Activos</h2>#}
                {#</header>#}
                {#<div class="main-box-body clearfix">#}
                    {#<div id="hero-bar"></div>#}
                {#</div>#}
            {#</div>#}
        {#</div>#}
    {#</div>#}
    {#FIN 3RA FILA#}


    {#DE AVANCED-TABLE#}
    <div class="row">
    <div class="col-lg-12">
    <div class="main-box clearfix">
    <header class="main-box-header clearfix">
        <h2>
            Pagos de Hoy
        </h2>
    </header>
    <div class="main-box-body clearfix">
    <div class="table-responsive">
    <table id="table-example" class="table table-hover user-list">
    <thead>
    <tr>
        <th>Clave</th>
        <th>Fecha de Ingreso</th>
        <th>Nombre</th>
        <th>Apellidos</th>
        <th>Tipo</th>
        <th>Foto</th>

    </tr>
    </thead>
    <tbody>
    {% if clientesPagoHoy %}
        {% for a in clientesPagoHoy %}
            <tr>
                <td>
                    {{ a.cliente.clave }}
                </td>
                <td>
                    {{ a.cliente.fechaDeIngreso | date('Y/m/d') }}
                </td>
                <td>
                    {{ a.cliente.nombre }}
                </td>
                <td>
                    {{ a.cliente.apellidos }}
                </td>
                {# haciendo la logica para la clase del span (cambiar colores segun el tipo de cliente)#}
                {% if  a.cliente.tipo  == 'Full'  %}
                    {% set b = 'label label-success' %}
                {% endif %}
                {% if  a.cliente.tipo  == 'MP' %}
                    {% set b = 'label label-warning' %}
                {% endif %}
                {% if  a.cliente.tipo  == 'VIP' %}
                    {% set b = 'label label-danger' %}
                {% endif %}
                <td class="">{#text-center#}
                    <span class="{{ b }}">{{ a.cliente.tipo }}</span>
                </td>
                {#<td class="" >&#123;&#35;text-right&#35;&#125;
                    &dollar; {{ a.costoDeservicio }}
                </td>#}

                <td><img src="{{ asset('uploads/images/' ~ a.cliente.fotoRuta) }}" class="img"/></td>

            </tr>
        {% endfor %}
    {% endif %}

    </tbody>
    </table>
    </div>
    </div>
    </div>
    </div>
    </div>

    </div>
    </div>
    <footer id="footer-bar" class="row">
        <p id="footer-copyright" class="col-xs-12">
            www.Gym.com
        </p>
    </footer>
    </div>
    </div>
    </div>


{% endblock %}

{% block script %}
    {#DE AVANCED-TABLE#}
    <script src="{{ asset('js/jquery.dataTables.js') }}"></script>
    <script src="{{ asset('js/dataTables.fixedHeader.js') }}"></script>
    <script src="{{ asset('js/dataTables.tableTools.js') }}"></script>
    <script src="{{ asset('js/jquery.dataTables.bootstrap.js') }}"></script>

    {#GRAPHIC-MORRIS#}
    <script src="{{ asset('js/jquery.knob.js') }}"></script>
    <script src="{{ asset('js/raphael-min.js') }}"></script>
    <script src="{{ asset('js/morris.js') }}"></script>
{% endblock %}

{% block script_independite %}
    <script>
        $(document).ready(function() {

            //CHARTS
            function gd(year, day, month) {
                return new Date(year, month - 1, day).getTime();
            }



            //WORLD MAP
            $('#world-map').vectorMap({
                map: 'world_merc_en',
                backgroundColor: '#ffffff',
                zoomOnScroll: false,
                regionStyle: {
                    initial: {
                        fill: '#e1e1e1',
                        stroke: 'none',
                        "stroke-width": 0,
                        "stroke-opacity": 1
                    },
                    hover: {
                        "fill-opacity": 0.8
                    },
                    selected: {
                        fill: '#8dc859'
                    },
                    selectedHover: {
                    }
                },
                markerStyle: {
                    initial: {
                        fill: '#e84e40',
                        stroke: '#e84e40'
                    }
                },
                markers: [
                    {latLng: [38.35, -121.92], name: 'Los Angeles - 23'},
                    {latLng: [39.36, -73.12], name: 'New York - 84'},
                    {latLng: [50.49, -0.23], name: 'London - 43'},
                    {latLng: [36.29, 138.54], name: 'Tokyo - 33'},
                    {latLng: [37.02, 114.13], name: 'Beijing - 91'},
                    {latLng: [-32.59, 150.21], name: 'Sydney - 22'}
                ],
                series: {
                    regions: [{
                        values: gdpData,
                        scale: ['#6fc4fe', '#2980b9'],
                        normalizeFunction: 'polynomial'
                    }]
                },
                onRegionLabelShow: function(e, el, code){
                    el.html(el.html()+' ('+gdpData[code]+')');
                }
            });

            /* SPARKLINE - graph in header */
            var orderValues = [10,8,5,7,4,4,3,8,0,7,10,6,5,4,3,6,8,9];

            $('.spark-orders').sparkline(orderValues, {
                type: 'bar',
                barColor: '#ced9e2',
                height: 25,
                barWidth: 6
            });

            var revenuesValues = [8,3,2,6,4,9,1,10,8,2,5,8,6,9,3,4,2,3,7];

            $('.spark-revenues').sparkline(revenuesValues, {
                type: 'bar',
                barColor: '#ced9e2',
                height: 25,
                barWidth: 6
            });

            /* ANIMATED WEATHER */
            var skycons = new Skycons({"color": "#03a9f4"});
            // on Android, a nasty hack is needed: {"resizeClear": true}

            // you can add a canvas by it's ID...
            skycons.add("current-weather", Skycons.SNOW);

            // start animation!
            skycons.play();

        });

        //PRUEBA DEL PRIMER GRAFICO
        $(document).ready(function() {

            //CHARTS
            function gd(year, day, month) {
                return new Date(year, month - 1, day).getTime();
            }

            if ($('#graph-bar1').length) {
                var data1 = [
                    [gd(2015, 1, 1), {{ cant_clientes_activos_enero }}], [gd(2015, 1, 2), {{ cant_clientes_activos_febrero }}], [gd(2015, 1, 3), {{ cant_clientes_activos_marzo }}],
                    [gd(2015, 1, 4), {{ cant_clientes_activos_abril }}], [gd(2015, 1, 5), {{ cant_clientes_activos_mayo }}], [gd(2015, 1, 6), {{ cant_clientes_activos_junio }}],
                    [gd(2015, 1, 7), {{ cant_clientes_activos_julio }}], [gd(2015, 1, 8), {{ cant_clientes_activos_agosto }}], [gd(2015, 1, 9), {{ cant_clientes_activos_septiembre }}],
                    [gd(2015, 1, 10), {{ cant_clientes_activos_octubre }}], [gd(2015, 1, 11), {{ cant_clientes_activos_noviembre }}], [gd(2015, 1, 12), {{ cant_clientes_activos_diciembre }}]
                ];



                var series = new Array();

                     series.push({
                    data: data1,
                    bars: {
                        show : true,
                        barWidth: 24 * 60 * 60 * 12000,
                        lineWidth: 1,
                        fill: 1,
                        align: 'center'
                    },
                    label: 'Clientes Activos'
                });
                /*    series.push({
                    data: data2,
                    color: '#e84e40',
                    lines: {
                        show : true,
                        lineWidth: 3
                    },
                    points: {
                        fillColor: "#e84e40",
                        fillColor: '#ffffff',
                        pointWidth: 1,
                        show: true
                    },
                    label: 'Gastos'
                });
                */

                $.plot("#graph-bar1", series, {
                    colors: ['#03a9f4', '#f1c40f', '#2ecc71', '#3498db', '#9b59b6', '#95a5a6'],
                    grid: {
                        tickColor: "#f2f2f2",
                        borderWidth: 0,
                        hoverable: true,
                        clickable: true
                    },
                    legend: {
                        noColumns: 1,
                        labelBoxBorderColor: "#000000",
                        position: "ne"
                    },
                    shadowSize: 0,
                    xaxis: {
                        mode: "time",
                        tickSize: [1, "month"],
                        tickLength: 0,
                        // axisLabel: "Date",
                        axisLabelUseCanvas: true,
                        axisLabelFontSizePixels: 12,
                        axisLabelFontFamily: 'Open Sans, sans-serif',
                        axisLabelPadding: 10
                    }
                });

                var previousPoint = null;
                $("#graph-bar1").bind("plothover", function (event, pos, item) {
                    if (item) {
                        if (previousPoint != item.dataIndex) {

                            previousPoint = item.dataIndex;

                            $("#flot-tooltip").remove();
                            var x = item.datapoint[0],
                                    y = item.datapoint[1];

                            showTooltip(item.pageX, item.pageY, item.series.label, y );
                        }
                    }
                    else {
                        $("#flot-tooltip").remove();
                        previousPoint = [0,0,0];
                    }
                });

                function showTooltip(x, y, label, data) {
                    $('<div id="flot-tooltip">' + '<b>' + label + ': </b><i>' + data + '</i>' + '</div>').css({
                        top: y + 5,
                        left: x + 20
                    }).appendTo("body").fadeIn(200);
                }
            }

            //WORLD MAP
            $('#world-map').vectorMap({
                map: 'world_merc_en',
                backgroundColor: '#ffffff',
                zoomOnScroll: false,
                regionStyle: {
                    initial: {
                        fill: '#e1e1e1',
                        stroke: 'none',
                        "stroke-width": 0,
                        "stroke-opacity": 1
                    },
                    hover: {
                        "fill-opacity": 0.8
                    },
                    selected: {
                        fill: '#8dc859'
                    },
                    selectedHover: {
                    }
                },
                markerStyle: {
                    initial: {
                        fill: '#e84e40',
                        stroke: '#e84e40'
                    }
                },
                markers: [
                    {latLng: [38.35, -121.92], name: 'Los Angeles - 23'},
                    {latLng: [39.36, -73.12], name: 'New York - 84'},
                    {latLng: [50.49, -0.23], name: 'London - 43'},
                    {latLng: [36.29, 138.54], name: 'Tokyo - 33'},
                    {latLng: [37.02, 114.13], name: 'Beijing - 91'},
                    {latLng: [-32.59, 150.21], name: 'Sydney - 22'}
                ],
                series: {
                    regions: [{
                        values: gdpData,
                        scale: ['#6fc4fe', '#2980b9'],
                        normalizeFunction: 'polynomial'
                    }]
                },
                onRegionLabelShow: function(e, el, code){
                    el.html(el.html()+' ('+gdpData[code]+')');
                }
            });

            /* SPARKLINE - graph in header */
            var orderValues = [10,8,5,7,4,4,3,8,0,7,10,6,5,4,3,6,8,9];

            $('.spark-orders').sparkline(orderValues, {
                type: 'bar',
                barColor: '#ced9e2',
                height: 25,
                barWidth: 6
            });

            var revenuesValues = [8,3,2,6,4,9,1,10,8,2,5,8,6,9,3,4,2,3,7];

            $('.spark-revenues').sparkline(revenuesValues, {
                type: 'bar',
                barColor: '#ced9e2',
                height: 25,
                barWidth: 6
            });

            /* ANIMATED WEATHER */
            var skycons = new Skycons({"color": "#03a9f4"});
            // on Android, a nasty hack is needed: {"resizeClear": true}

            // you can add a canvas by it's ID...
            skycons.add("current-weather", Skycons.SNOW);

            // start animation!
            skycons.play();

        });

        //DE AVANCED-TABLE
        $(document).ready(function() {
           var table = $('#table-example').dataTable({
                'info': false,
                'sDom': 'lTfr<"clearfix">tip',
                'oTableTools': {
                    'aButtons': [
                        {
                            'sExtends':    'collection',
                           // 'sButtonText': '{#<i class="fa fa-cloud-download"></i>&nbsp;&nbsp;&nbsp;<i class="fa fa-caret-down"></i>#}',
                            'aButtons':    [ /*'csv', 'xls', 'pdf', 'copy', 'print'*/ ]
                        }
                    ]
                }
            });

            var tt = new $.fn.dataTable.TableTools( table );
            $( tt.fnContainer() ).insertBefore('div.dataTables_wrapper');

            var tableFixed = $('#table-example-fixed').dataTable({
                'info': false,
                'pageLength': 50
            });

            new $.fn.dataTable.FixedHeader( tableFixed );
        });

    //GRAPHIC-MORRIS
        $(function($) {
            graphArea = Morris.Area({
                element: 'graph',
                behaveLikeLine: true,
                data: [
                    {x: '2011 Q1', y: 3, z: 3},
                    {x: '2011 Q2', y: 2, z: 1},
                    {x: '2011 Q3', y: 2, z: 4},
                    {x: '2011 Q4', y: 3, z: 3}
                ],
                lineColors: ['#ffc107', '#03a9f4'],
                xkey: 'x',
                ykeys: ['y', 'z'],
                labels: ['Y', 'Z'],
                resize: true
            });

            graphBar = Morris.Bar({
                element: 'graph-bar',
                data: [
                    {x: '2011 Q1', y: 3, z: 2, a: 3},
                    {x: '2011 Q2', y: 2, z: null, a: 1},
                    {x: '2011 Q3', y: 0, z: 2, a: 4},
                    {x: '2011 Q4', y: 2, z: 4, a: 3}
                ],
                barColors: ['#8bc34a', '#ffc107', '#e84e40', '#03a9f4', '#9c27b0', '#90a4ae'],
                xkey: 'x',
                ykeys: ['y', 'z', 'a'],
                labels: ['Y', 'Z', 'A'],
                resize: true
            });

            var tax_data = [
                {"period": "2011 Q3", "licensed": 3407, "sorned": 660},
                {"period": "2011 Q2", "licensed": 3351, "sorned": 629},
                {"period": "2011 Q1", "licensed": 3269, "sorned": 618},
                {"period": "2010 Q4", "licensed": 3246, "sorned": 661},
                {"period": "2009 Q4", "licensed": 3171, "sorned": 676},
                {"period": "2008 Q4", "licensed": 3155, "sorned": 681},
                {"period": "2007 Q4", "licensed": 3226, "sorned": 620},
                {"period": "2006 Q4", "licensed": 3245, "sorned": null},
                {"period": "2005 Q4", "licensed": 3289, "sorned": null}
            ];
            graphLine = Morris.Line({
                element: 'hero-graph',
                data: tax_data,
                lineColors: ['#8bc34a', '#ffc107', '#e84e40', '#03a9f4', '#9c27b0', '#90a4ae'],
                xkey: 'period',
                ykeys: ['licensed', 'sorned'],
                labels: ['Licensed', 'Off the road'],
                resize: true
            });

            graphDonut = Morris.Donut({
                element: 'hero-donut',
                data: [
                    {label: 'Jam', value: 25 },
                    {label: 'Frosted', value: 40 },
                    {label: 'Custard', value: 25 },
                    {label: 'Sugar', value: 10 }
                ],
                colors: ['#8bc34a', '#ffc107', '#e84e40', '#03a9f4', '#9c27b0', '#90a4ae'],
                formatter: function (y) { return y + "%" },
                resize: true
            });

            graphArea2 = Morris.Area({
                element: 'hero-area',
                data: [
                    {period: '2010 Q1', iphone: 2666, ipad: null, itouch: 2647},
                    {period: '2010 Q2', iphone: 2778, ipad: 2294, itouch: 2441},
                    {period: '2010 Q3', iphone: 4912, ipad: 1969, itouch: 2501},
                    {period: '2010 Q4', iphone: 3767, ipad: 3597, itouch: 5689},
                    {period: '2011 Q1', iphone: 6810, ipad: 1914, itouch: 2293},
                    {period: '2011 Q2', iphone: 5670, ipad: 4293, itouch: 1881},
                    {period: '2011 Q3', iphone: 4820, ipad: 3795, itouch: 1588},
                    {period: '2011 Q4', iphone: 15073, ipad: 5967, itouch: 5175},
                    {period: '2012 Q1', iphone: 10687, ipad: 4460, itouch: 2028},
                    {period: '2012 Q2', iphone: 8432, ipad: 5713, itouch: 1791}
                ],
                lineColors: ['#0288d1', '#607d8b', '#689f38', '#8e44ad', '#c0392b', '#f39c12'],
                xkey: 'period',
                ykeys: ['iphone', 'ipad', 'itouch'],
                labels: ['iPhone', 'iPad', 'iPod Touch'],
                pointSize: 2,
                hideHover: 'auto',
                resize: true
            });

            graphBar2 = Morris.Bar({
                element: 'hero-bar',
                data: [
                    {device: 'iPhone', geekbench: 136},
                    {device: 'iPhone 3G', geekbench: 137},
                    {device: 'iPhone 3GS', geekbench: 275},
                    {device: 'iPhone 4', geekbench: 380},
                    {device: 'iPhone 4S', geekbench: 655},
                    {device: 'iPhone 5', geekbench: 1571}
                ],
                barColors: ['#8bc34a', '#e84e40', '#f39c12', '#3fcfbb', '#626f70', '#8f44ad'],
                xkey: 'device',
                ykeys: ['geekbench'],
                labels: ['Geekbench'],
                barRatio: 0.4,
                xLabelAngle: 35,
                hideHover: 'auto',
                resize: true
            });

            /* KNOB CHART LIBRARY */

            $(".knob").knob({
                change : function (value) {
                    //console.log("change : " + value);
                },
                release : function (value) {
                    //console.log(this.$.attr('value'));
                    console.log("release : " + value);
                },
                cancel : function () {
                    console.log("cancel : ", this);
                },
                draw : function () {

                    // "tron" case
                    if(this.$.data('skin') == 'tron') {

                        var a = this.angle(this.cv)  // Angle
                                , sa = this.startAngle		  // Previous start angle
                                , sat = this.startAngle		 // Start angle
                                , ea							// Previous end angle
                                , eat = sat + a				 // End angle
                                , r = 1;

                        this.g.lineWidth = this.lineWidth;

                        this.o.cursor
                        && (sat = eat - 0.3)
                        && (eat = eat + 0.3);

                        if (this.o.displayPrevious) {
                            ea = this.startAngle + this.angle(this.v);
                            this.o.cursor
                            && (sa = ea - 0.3)
                            && (ea = ea + 0.3);
                            this.g.beginPath();
                            this.g.strokeStyle = this.pColor;
                            this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, sa, ea, false);
                            this.g.stroke();
                        }

                        this.g.beginPath();
                        this.g.strokeStyle = r ? this.o.fgColor : this.fgColor ;
                        this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, sat, eat, false);
                        this.g.stroke();

                        this.g.lineWidth = 2;
                        this.g.beginPath();
                        this.g.strokeStyle = this.o.fgColor;
                        this.g.arc( this.xy, this.xy, this.radius - this.lineWidth + 1 + this.lineWidth * 2 / 3, 0, 2 * Math.PI, false);
                        this.g.stroke();

                        return false;
                    }
                }
            });

            // Example of infinite knob, iPod click wheel
            var v, up=0,down=0,i=0
                    ,$idir = $("div.idir")
                    ,$ival = $("div.ival")
                    ,incr = function() { i++; $idir.show().html("+").fadeOut(); $ival.html(i); }
                    ,decr = function() { i--; $idir.show().html("-").fadeOut(); $ival.html(i); };

            $("input.infinite").knob({
                min : 0
                , max : 20
                , stopper : false
                , change : function () {
                    if(v > this.cv){
                        if(up){
                            decr();
                            up=0;
                        }else{up=1;down=0;}
                    } else {
                        if(v < this.cv){
                            if(down){
                                incr();
                                down=0;
                            }else{down=1;up=0;}
                        }
                    }
                    v = this.cv;
                }
            });
        });

    </script>

{% endblock %}

